"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PageLoader = void 0;
const range_1 = require("./utilities/range");
const node_util_1 = require("node:util");
class PageLoader {
    constructor(options) {
        this.baseUrl = options.baseUrl;
        this.strategy = options.strategy;
        this.fetchPage = options.fetchPage;
    }
    static createPages(trackCount, strategy) {
        return (0, range_1.range)(1, Math.min(Math.floor(trackCount / strategy.size), strategy.limit - 1), 1);
    }
    async load(manager, resourceId, data) {
        const tracks = data.tracks;
        if (data.total === -1) {
        }
        else if (tracks.length < data.total) {
            const pages = PageLoader.createPages(data.total, this.strategy);
            let toAdd;
            if (this.strategy.type === "parallel") {
                const resolved = await Promise.all(pages
                    .map(page => this.createUrl(resourceId, page))
                    .map(path => this.fetchPage(manager, path)));
                toAdd = resolved.flat();
            }
            else {
                toAdd = [];
                for (const page of pages) {
                    const path = this.createUrl(resourceId, page);
                    toAdd.push(...await this.fetchPage(manager, path));
                }
            }
            tracks.push(...toAdd);
        }
        return tracks;
    }
    createUrl(resourceId, page) {
        return (0, node_util_1.format)(this.baseUrl, resourceId)
            + `?limit=${this.strategy.size}`
            + `&offset=${this.strategy.size * page}`;
    }
}
exports.PageLoader = PageLoader;
