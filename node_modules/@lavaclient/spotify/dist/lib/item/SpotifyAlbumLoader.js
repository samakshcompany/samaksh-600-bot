"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpotifyAlbumLoader = void 0;
const Loader_1 = require("../abstract/Loader");
const SpotifyAlbum_1 = require("./SpotifyAlbum");
const SpotifyItem_1 = require("../abstract/SpotifyItem");
const PageLoader_1 = require("../PageLoader");
const SpotifyPlaylistLoader_1 = require("./SpotifyPlaylistLoader");
const SpotifyTrack_1 = require("./SpotifyTrack");
class SpotifyAlbumLoader extends Loader_1.Loader {
    constructor(pageLoadingStrategy) {
        super();
        this.itemType = SpotifyItem_1.SpotifyItemType.Album;
        this.matchers = [
            /^(?:https?:\/\/|)?(?:www\.)?open\.spotify\.com\/album\/([a-zA-Z\d-_]+)/,
            /^spotify:album:([a-zA-Z\d-_]+)$/,
        ];
        this.pageLoader = new PageLoader_1.PageLoader({
            baseUrl: "/albums/%s/tracks",
            fetchPage: async (manager, path) => {
                const page = await manager.makeRequest(path);
                return SpotifyPlaylistLoader_1.SpotifyPlaylistLoader.filterTracks(page.items);
            },
            strategy: pageLoadingStrategy
        });
    }
    async load(manager, [, id]) {
        const album = await manager.makeRequest(`/albums/${id}`);
        const tracks = await this.pageLoader.load(manager, id, {
            tracks: album.tracks.items,
            total: album.tracks.total
        });
        return new SpotifyAlbum_1.SpotifyAlbum(manager, album, tracks.map((0, SpotifyTrack_1.createTrackFactory)(manager)));
    }
}
exports.SpotifyAlbumLoader = SpotifyAlbumLoader;
