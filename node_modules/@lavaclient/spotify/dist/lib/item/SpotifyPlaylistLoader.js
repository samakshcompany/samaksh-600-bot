"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpotifyPlaylistLoader = void 0;
const Loader_1 = require("../abstract/Loader");
const SpotifyItem_1 = require("../abstract/SpotifyItem");
const SpotifyPlaylist_1 = require("./SpotifyPlaylist");
const PageLoader_1 = require("../PageLoader");
const SpotifyTrack_1 = require("./SpotifyTrack");
class SpotifyPlaylistLoader extends Loader_1.Loader {
    constructor(pageLoadingStrategy) {
        super();
        this.itemType = SpotifyItem_1.SpotifyItemType.Playlist;
        this.matchers = [
            /^(?:https?:\/\/|)?(?:www\.)?open\.spotify\.com\/playlist\/([a-zA-Z\d-_]+)/,
            /spotify:playlist:([a-zA-Z\d-_]+)$/
        ];
        this.pageLoader = new PageLoader_1.PageLoader({
            baseUrl: "/playlists/%s/tracks",
            fetchPage: async (manager, path) => {
                const page = await manager.makeRequest(path);
                return SpotifyPlaylistLoader.filterTracks(page.items);
            },
            strategy: pageLoadingStrategy
        });
    }
    static filterTracks(tracks) {
        return tracks
            .map(it => it.track)
            .filter(it => it != null);
    }
    async load(manager, [, id]) {
        const playlist = await manager.makeRequest(`/playlists/${id}`);
        const tracks = await this.pageLoader.load(manager, id, {
            tracks: SpotifyPlaylistLoader.filterTracks(playlist.tracks.items),
            total: playlist.tracks.total
        });
        return new SpotifyPlaylist_1.SpotifyPlaylist(manager, playlist, tracks.map((0, SpotifyTrack_1.createTrackFactory)(manager)));
    }
}
exports.SpotifyPlaylistLoader = SpotifyPlaylistLoader;
