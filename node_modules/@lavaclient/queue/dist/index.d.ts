import { Player, Snowflake, DiscordResource, ClusterNode } from 'lavaclient';
import { TrackInfo, Track } from '@lavaclient/types/v3';
import { TypedEmitter } from 'tiny-typed-emitter';

declare class Song implements TrackInfo {
    readonly track: string;
    readonly requester?: string;
    length: number;
    identifier: string;
    author: string;
    isStream: boolean;
    position: number;
    title: string;
    uri: string;
    isSeekable: boolean;
    sourceName: string;
    constructor(track: string | Track, requester?: string);
}

declare enum LoopType {
    None = 0,
    Queue = 1,
    Song = 2
}
interface QueueOptions {
    play: (queue: Queue, song: Song) => Promise<void>;
}
declare class Queue extends TypedEmitter<QueueEvents> {
    readonly player: Player;
    readonly options: QueueOptions;
    tracks: Song[];
    previous: Song[];
    loop: Loop;
    last: Song | null;
    current: Song | null;
    data: Record<string, any>;
    constructor(player: Player, options: QueueOptions);
    skip(): Promise<Song | null>;
    start(): Promise<boolean>;
    next(): Promise<boolean>;
    clear(): void;
    remove(song: Song): Song | null;
    remove(index: number): Song | null;
    emit<U extends keyof QueueEvents>(event: U, ...args: Parameters<QueueEvents[U]>): boolean;
    add(songs: Addable | Array<Addable>, options?: AddOptions): number;
    setLoop(type: LoopType, max?: number): this;
    sort(predicate?: (a: Song, b: Song) => number): Array<Song>;
    shuffle(): void;
    set<T extends Record<string, any>>(data?: T): void;
    set<T>(key: string, value: T): void;
    get<T extends Record<string, any>>(): T;
    get<T>(key: string): T | null;
}
declare type Addable = string | Track | Song;
interface QueueEvents {
    trackStart: (song: Song) => void;
    trackEnd: (song: Song) => void;
    finish: () => void;
}
interface Loop {
    type: LoopType;
    current: number;
    max: number;
}
interface AddOptions {
    requester?: Snowflake | DiscordResource;
    next?: boolean;
}

declare const _queue: unique symbol;
declare function load(createQueue?: (player: Player) => Queue): void;

declare module "lavaclient" {
    interface Player {
        readonly queue: Queue;
        [_queue]: Queue;
    }
    interface ClusterEvents {
        nodeQueueCreate: (node: ClusterNode, queue: Queue) => void;
        nodeQueueFinish: (node: ClusterNode, queue: Queue) => void;
        nodeTrackStart: (node: ClusterNode, queue: Queue, song: Song) => void;
        nodeTrackEnd: (node: ClusterNode, queue: Queue, song: Song) => void;
    }
    interface NodeEvents {
        queueCreate: (queue: Queue) => void;
        queueFinish: (queue: Queue) => void;
        trackStart: (queue: Queue, song: Song) => void;
        trackEnd: (queue: Queue, song: Song) => void;
    }
}

export { AddOptions, Addable, Loop, LoopType, Queue, QueueEvents, QueueOptions, Song, _queue, load };
